<?php
/**
 * Created by PhpStorm.
 * User: shenyang
 * Date: 2017/7/25
 * Time: 下午7:33
 */

namespace app\frontend\models\order;

use app\common\models\VirtualCoin;
use app\frontend\modules\coin\deduction\models\Deduction;
use app\frontend\modules\order\models\PreOrder;

abstract class PreOrderDeduction extends \app\common\models\order\OrderDeduction
{
    public $order;
    private $orderGoodsCollectionDeduction;

    // todo 初始化订单 初始化抵扣
    public function setOrder(PreOrder $order)
    {
        $this->order = $order;
        $this->orderGoodsCollectionDeduction = $this->getOrderGoodsCollectionDeduction();
        $this->_init();
    }

    private function _init()
    {
        $this->uid = $this->order->uid;
        $this->order->orderDeductions->push($this);
        $this->coin = $this->getUsablePoint()->getCoin();
        $this->amount = $this->getUsablePoint()->getMoney();
        $this->code = $this->getCode();
        $this->name = $this->getName();

    }

    public function deduction()
    {
        return $this->belongsTo(Deduction::class, 'code', 'code');
    }

    /**
     * @return VirtualCoin
     */
    abstract public function getUsablePoint();

    /**
     * @return OrderGoodsCollectionDeduction
     */
    abstract public function getOrderGoodsCollectionDeduction();

    /**
     * @return string
     */
    abstract public function getCode();

    /**
     * @return string
     */
    public function getName()
    {

        return $this->deduction->getName();
    }

    /**
     * @return int
     */
    abstract public function getDeductionId();

    /**
     * @return bool
     */
    abstract public function isEnable();


    /**
     * @return bool
     */
    public function isChecked()
    {
        $deduction_ids = $this->order->getParams('deduction_ids');

        if (!is_array($deduction_ids)) {
            $deduction_ids = json_decode($deduction_ids, true);
            if (!is_array($deduction_ids)) {
                $deduction_ids = explode(',', $deduction_ids);
            }
        }
        return in_array($this->getDeductionId(), $deduction_ids);

    }

    public function save(array $options = [])
    {

        if (!$this->isChecked()) {
            // todo 应该返回什么
            return true;
        }
        return parent::save($options); // TODO: Change the autogenerated stub
    }
}