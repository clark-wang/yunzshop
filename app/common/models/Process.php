<?php

/**
 * Created by PhpStorm.
 * User: shenyang
 * Date: 2018/6/6
 * Time: 下午4:11
 */

namespace app\common\models;

use app\common\modules\process\events\AfterProcessStatusChanged;
use app\common\modules\process\ProcessObserver;
use app\common\traits\BelongsStatusTrait;
use app\common\traits\HasProcessTrait;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\SoftDeletes;

/**
 * 进程
 * Class ModelHasFlow
 * @package app\common\models\flow
 * @property Flow flow
 * @property string state
 * @property Collection status
 * @property string model_type
 */
class Process extends BaseModel
{
    use BelongsStatusTrait{
        statusAttribute as baseStatusAttribute;
    }
    use HasProcessTrait, SoftDeletes;
    public $table = 'yz_process';

    protected $guarded = ['id'];
    protected $dates = ['created_at', 'updated_at'];
    protected $appends = ['name', 'status_name'];
    protected $hidden = ['flow'];
    const STATUS_PROCESSING = 'processing';
    const STATUS_COMPLETED = 'completed';
    const STATUS_CANCELED = 'canceled';

    /**
     * 进程的主体
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function model()
    {
        return $this->belongsTo($this->model_type, 'model_id');
    }

    /**
     * 所属流程类型
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function flow()
    {
        return $this->belongsTo(Flow::class);
    }

    /**
     * @param State $state
     * @return array
     */
    protected function statusAttribute(State $state)
    {
        return array_merge($this->baseStatusAttribute($state),['code' => $this->flow->code . '.' . $state->code]);
    }

    /**
     * 初始化状态
     */
    public function initStatus()
    {
        // 流程的第一个情况
        $firstState = $this->flow->states->first();
        $this->createStatus($firstState);
    }

    /**
     * 进入下一个状态
     * @throws \Exception
     */
    public function toNextStatus()
    {
        // 流程的下一个情况
        $nextState = $this->flow->getNextState($this->currentStatus()->state);
        // 删除旧状态 todo 删除后当前状态时候能更新
        $this->currentStatus()->delete();
        // 根据情况生成新状态
        $this->createStatus($nextState);

    }

    /**
     * @return string
     */
    public function getNameAttribute()
    {
        return $this->flow->name;
    }

    /**
     * @return string
     */

    public function getStateNameAttribute()
    {
        return [
            self::STATUS_PROCESSING => '处理中',
            self::STATUS_COMPLETED => '已完成',
            self::STATUS_CANCELED => '已取消',
        ][$this->state];
    }

    public function getStatusNameAttribute()
    {

        return $this->currentStatus()->state->name;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        //static::observe(new ProcessObserver());

    }
}
